/********************************************************************
 *																	*
 * peer.c															*
 *																	*
 * Description: This file contains the C source code for the 		*
 * 				BitTorrent file transfer application.				*
 * 				This BitTorrent is based on code originally 		*
 * 				authored by:										*
 * 					Ed Bardsley <ebardsle+441@andrew.cmu.edu>		*
 * 					Dave Andersen									*
 *																	*
 * 				The current implementation supports the following:	*
 * 					1. Generates a WHOHAS packet and sends to 		*
 * 					   it to peers after receiving a GET request	*
 * 					2. Responds with correct IHAVE packet when		*
 * 					   it receives a WHOHAS packet					*
 * 					3. Does not send an IHAVE packet when it does	*
 * 					   not have any chunks listed in a WHOHAS		*
 * 					   packet										*
 *																	*
 *******************************************************************/
//
//
//TODO: replace all +4s
//Potentially get rid of globals
//Move some funcs into other files?
//
#include <sys/types.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "debug.h"
#include "spiffy.h"
#include "bt_parse.h"
#include "input_buffer.h"
#include "log.h"
#include "packet.h"
#include "hashList.h"

#define SUCCESS 1
#define FAILURE -1
#define HASHSIZE 20
#define CHUNKSIZE 524288
#define MAXPACKETSIZE 1500
#define NUMPACKETS 354
#define HEADERLEN 16
#define SPIFFY 1
#define CHK_NULL(x) if (x == NULL) exit(1);

#define WINDOW_SIZE 8
#define MAX_PACKET_SIZE 1500

int UPLOADING = 0;
int DOWNLOADING = 0;
static FILE *log;
int mysock;
bt_config_t *globalconfig;
hashList *globalReqHashes;

typedef struct
{
  struct sockaddr_in * addr;
  int ackNum;
  int chunk;
}DownloadConnection;

typedef struct
{
  struct sockaddr_in * addr;
  int timeout;
  int seqNum;
  int chunk;
}UploadConnection;

typedef struct
{
  struct sockaddr_in * addr;
}NonDataConnection;

struct tm * getTime()
{
  time_t rawtime;
  struct tm *timeinfo;

  time(&rawtime);
  timeinfo = gmtime(&rawtime);
  return timeinfo;
}

void peer_run(bt_config_t *config);

///TEMP
void print_bytes(const void *object, size_t size)
{
  size_t i;

  printf("[ ");
  for(i = 0; i < size; i++)
  {
    printf("%02x ", ((const unsigned char *) object)[i] & 0xff);
  }
  printf("]\n");
}


//
// Main: Runs the server
// Parameters: Takes in 6 arguments
// Returns: 0 on success
//
int main(int argc, char **argv) {
  bt_config_t config;

  bt_init(&config, argc, argv);
  log = open_log("debug.txt");
  Log(log, "--------- peer.c now running ---------\n");

  DPRINTF(DEBUG_INIT, "peer.c main beginning\n");

#ifdef TESTING
  config.identity = 11; // Team 11
  strcpy(config.chunk_file, "chunkfile");
  strcpy(config.has_chunk_file, "haschunks");
#endif

  Log(log, "Parsing command line args\n");
  bt_parse_command_line(&config);

#ifdef DEBUG
  if (debug & DEBUG_INIT) {
    bt_dump_config(&config);
  }
#endif

  peer_run(&config);
  return 0;
}

struct tm * getTime()
{
  time_t rawtime;
  struct tm *timeinfo;

  time(&rawtime);
  timeinfo = gmtime(&rawtime);
  return timeinfo;
}


//
//sendToAllPeers: Send buf to all in peer_list_file
//Parameters:
//		int sock:
//		char *sendbuf:
//		const bt_config_t *config:
//
void sendToAllPeers(int sock, char *sendbuf, const bt_config_t *config)
{
  #define BUFLEN 1500
  struct sockaddr_in addr;
  socklen_t addrlen;

  bt_peer_t *peer;

  peer = config->peers;
  addrlen = sizeof(addr);
  while(peer != NULL){

    if (peer->id == config->identity){
      peer=peer->next;
      continue;
    }
    addr = peer->addr;
    Log(log,"Sending WHOHAS to %s:%d\n",
	   inet_ntoa(addr.sin_addr),
	   ntohs(addr.sin_port));
#ifdef SPIFFY
    spiffy_sendto(sock, sendbuf, BUFLEN, 0, (const struct sockaddr *) &addr, addrlen);
#else
    sendto(sock, sendbuf, BUFLEN, 0, (const struct sockaddr *) &addr, addrlen);
#endif
    peer=peer->next;
  }

  printf("Sending to all\n");
  print_bytes(sendbuf,BUFLEN);
}

//retruns number of bytes read into send data
unsigned int putNexData(char *senddata, hashNode *node, FILE *f){
  unsigned int bytes = MAXPACKETSIZE - HEADERLEN;
  unsigned int foffset;
  unsigned int read;
  node->seqNum++;
  foffset = (node->chunkOffset * CHUNKSIZE) + (node->seqNUM * bytes);
  if (node->seqNum = (NUMPACKETS - 1)){
    bytes = CHUNKSIZE - (bytes * (NUMPACKETS - 1));
  }
  //setpos
  read = fread(senddata, sizeof(char), bytes, f);
  if (read != bytes) return FAILURE;
  return read;
}

int doIHaveChunk(const char *reqHash, const char * has_chunk_file){
  FILE *fd;
  char chunk_hash[HASHSIZE];
  unsigned int id;
  Log(log, "Opening has_chunk_file\n");
  fd = fopen(has_chunk_file, "r");

  if (fd == NULL){ //change to CHK_NULL-- why??
	Log(log, "Error: has_chunk_file is NULL. Closing file.\n");
	fclose(fd);
	exit(EXIT_FAILURE);
  }

  Log(log, "Success: Opened has_chunk_file\n");

  while((id = getNextHashFromFile(fd, chunk_hash)) != FAILURE){
    //Search if chunk_hash is in the requested hashes
    //If we found a match, copy the hash into the next space in senddata
    if(memcmp(chunk_hash,reqHash, HASHSIZE) == 0){
      return id;
    }
  }

  return FAILURE;
}

int generateResponseToIHAVE(const char *data,char *senddata, hashList *requestedHashes, hashList *downloadingHashes, struct sockaddr_in *addr){
  //if hash is in requested hashes, remove it
  //add it to downloadingHahes with ackNum -1
  //put hash in body
  unsigned char numChunkHashes;
  hashNode * reqNode;
  char reqHash[HASHSIZE];
  const char * chunk_hashes;
  int i;

  chunk_hashes = data + 4;
  memcpy(&numChunkHashes, data, sizeof(numChunkHashes));

  for(i = 0; i < numChunkHashes; i++){
    memcpy(reqHash,chunk_hashes + (HASHSIZE * i),HASHSIZE);
    //If we found a match, copy the hash into the next space in senddata
    if((reqNode = findHashNode(requestedHashes, reqHash)) != NULL){
      Log(log, "Found match in requestedHashes\n");

      removeNode(requestedHashes, reqNode);
      appendNode(downloadingHashes, reqNode);

      putAddr(reqNode, addr);
      reqNode->ackNum = -1;

      memcpy(senddata, reqHash, HASHSIZE);
      return SUCCESS;
    }

  }
  return FAILURE;
}

//returns number of bytes read
int generateResponseToGET(const char *data,char *senddata,const bt_config_t *config, hashList *uploadingHashes, struct sockaddr_in *addr){
  //check if Ihavechunk
  //set up uploadConnection
  //send fist DATA
  char reqHash[HASHSIZE];
  hashNode *reqNode;
  unsigned int id;
  memcpy(reqHash, senddata, HASHSIZE);
  if ((id = doIHaveChunk(reqHash, config->has_chunk_file)) == FAILURE)
    return FAILURE;
  reqNode = newHashNode(reqHash, id);
  putAddr(reqNode, addr);
  putTimeout(reqNode, getTime());
  appendNode(uploadingHashes, reqNode);
  return putNextData(senddata,node,uploadingHashes->fstream);

  //PUT data into senddata
  return SUCCESS;
}

//return ACK to send
int generateResponseToDATA(const char *data,char *senddata,const bt_config_t *config, hashList *downloadingHashes, struct sockaddr_in *addr, unsigned int seqNum){
  //find ipaddr in downloadingHashes
  hashNode *node = findAddrNode(downloadingHashes, addr);
  if (node == NULL)
    return FAILURE;


  return SUCCESS;
}


int generateResponseToACK(const char *data,char *senddata,const bt_config_t *config, hashList *uploadingHashes, struct sockaddr_in *addr, unsigned int ackNum){
  hashNode *node = findAddrNode(uploadingHashes, addr);
  if (node == NULL)
    return FAILURE;

  return SUCCESS;
}
//
// generateResponseToWHOHAS:
// Parameters:
// 		const char *data:
// 		char *senddata
// 		const bt_config_t *config:
// Returns:
//		int hits:
//
int generateResponseToWHOHAS(const char *data, char *senddata, const bt_config_t *config)
{
  int i;
  FILE *fd;
  unsigned char hits = 0;
  const char *has_chunk_file, *chunk_hashes;
  /*char line[30];   //unused variable */

  has_chunk_file = config->has_chunk_file;

  Log(log, "Method call: generateResponseToWHOHAS\n");

  //Get number of chunk hashes from payload
  unsigned char numChunkHashes;
  memcpy(&numChunkHashes, data, sizeof(numChunkHashes));

  //The chunk hashes start after the first 4 bytes of data
  chunk_hashes = data + 4;

  Log(log, "Opening has_chunk_file\n");
  fd = fopen(has_chunk_file, "r");
  if (fd == NULL){ //change to CHK_NULL-- why??
	Log(log, "Error: has_chunk_file is NULL. Closing file.\n");
	fclose(fd);
	exit(EXIT_FAILURE);
  }

  Log(log, "Success: Opened has_chunk_file\n");

  //Read has_chunk_file line by line comparing each chunk hash to requested hashes
  char reqHash[HASHSIZE];
  //Search if chunk_hash is in the requested hashes
  for(i = 0; i < numChunkHashes; i++){
      memcpy(reqHash,chunk_hashes + (HASHSIZE * i),HASHSIZE);
      //If we found a match, copy the hash into the next space in senddata
      if(doIHaveChunk(reqHash, has_chunk_file) != FAILURE){
	Log(log, "Found match in has_chunk_file\n");
	memcpy((senddata + 4) + (hits*HASHSIZE), reqHash, HASHSIZE);
	hits++;
      }

  }
  fclose(fd);
  //Copy number of hashchunks into data
  memcpy(senddata, &hits, sizeof(hits));
  Log(log, "WHOHAS num hits: %d\n", hits);

  return hits;
}

//
// process_inbound_udp:
// Parameters:
// 		int sock:
//              bt_config_t *config: Command line args
//

void process_inbound_udp(int sock, const bt_config_t *config, hashList *requestedHashes, hashList *downloadingHashes, hashList *uploadingHashes)
{
  #define BUFLEN 1500

  PacketHeader ph;
  struct sockaddr_in from;
  socklen_t fromlen;
  char buf[BUFLEN];
  char sendbuf[BUFLEN];
  char *data;
  char *senddata;
  int readret;
  unsigned char hits;
  unsigned int senddataLen;
  fromlen = sizeof(from);

  Log(log, "Method call: process_inbound_udp\n");
#ifdef SPIFFY
  readret = spiffy_recvfrom(sock, buf, BUFLEN, 0, (struct sockaddr *) &from, &fromlen);
#else
  readret = recvfrom(sock, buf, BUFLEN, 0, (struct sockaddr *) &from, &fromlen);
#endif
  if (readret <= 0){
	Log(log, "Error: spiffy_recvfrom failed\n");
	//Do something?
  }else{
    Log(log, "Success: spiffy_recvfrom got something:\n\n");
    printf("Recieved:\n");
    print_bytes(buf, BUFLEN);
    Log(log, "Filling packet header\n");
    //Parse the packet headegr into the fields
    fillPacketHeader(&ph, buf);

    Log(log, "	Magic num: %d\n", ph.magicNum);
    Log(log, "	Version: %d\n", ph.version);
    Log(log, "	Type: %d\n", ph.type);
    Log(log, "	HeaderLen: %d\n", ph.headerLen);
    Log(log, "	PacketLen: %d\n", ph.packetLen);
    Log(log, "	Seq num: %d\n", ph.seqNum);
    Log(log, "	Ack num: %d\n", ph.ackNum);

	//Set data to point to the data in the packet
    data = buf + ph.headerLen;
    senddata = sendbuf + ph.headerLen;

    //Check the validity of the packet received
    if((ph.magicNum == 15441) && (ph.version == 1)){

      switch(ph.type){
      case WHOHAS :
	Log(log, "Received WHOHAS Request\n");

	//Data is buf after header
	hits = generateResponseToWHOHAS(data,senddata,config);
	if (hits > 0){
	  senddataLen = (hits * HASHSIZE) + 4;
	  createPacketHeader(&ph, IHAVE, HEADERLEN, HEADERLEN + senddataLen, 0, 0);
	  putHeader(&ph, sendbuf);
#ifdef SPIFFY
	  spiffy_sendto(sock, sendbuf, BUFLEN, 0, (const struct sockaddr *) &from, fromlen);
#else
	  sendto(sock, sendbuf, BUFLEN, 0, (const struct sockaddr *) &from, fromlen);
#endif
	  printf("Sent to WHOHAS requester\n");
	  print_bytes(sendbuf,BUFLEN);
	}

	//check if I have
	//Reply with IHAVE
	break;
      case IHAVE :
	Log(log, "Received IHAVE Request\n");
	//Dont want to downmload two chunks from one peer
	if (findAddrNode(downloadingHashes, &from) != NULL){
	  Log(log, "Recieved IHAVE from a peer whom we are already downloading from\n");
	  break;
	}
	hits = generateResponseToIHAVE(data,senddata, requestedHashes, downloadingHashes, &from);
	if (hits == SUCCESS){
	  senddataLen = HASHSIZE;
	  createPacketHeader(&ph, GET, ph.headerLen, ph.headerLen + senddataLen, 0,0);
	  putHeader(&ph, sendbuf);
	  spiffy_sendto(sock, sendbuf, BUFLEN, 0, (const struct sockaddr *) &from, fromlen);
	}
	//if (findHashNode(requestedHashes, chunk_hash) != NULL);
	//check to make sure you rewquested that chunk
	//setupDowloadConnection
	break;
      case GET :
	Log(log, "Received GET Request\n");
	if ((senddataLen = generateResponseToGET(data,senddata, config, uploadingHashes, &from )) != FAILURE){
	  createPacketHeader(&ph ,DATA, HEADERLEN, HEADERLEN + senddataLen, 0, 0);
	  putHeader(&ph, sendbuf);
	  spiffy_sendto(sock, sendbuf, senddataLen + HEADERLEN, 0, (const struct sockaddr *) &from, fromlen);
	}
	//check to make sure you have
	//setup Upload connection
	//send first WINDOW_SIZE packets
	break;
      case DATA :
	Log(log, "Recieved DATA\n");
	//find node in downloading Hashes
	generateResponseToDATA(data,senddata, config, downloadingHashes, &from, ph.seqNum);
	//find download connection
	//if seq != nextExpected
	//buffer chunk, send last ACK
	//else save data, send ACK
	break;
      case ACK :
	Log(log, "Recieved ACK\n");
	//find node in uploadingHashes
	generateResponseToACK(data,senddata,config,uploadingHashes, &from, ph.ackNum);
	//if not correct ACK
	//else send next chunk
	break;
      case DENIED :
	break;
      default :
	//Do something else
	;
      }
    }

    //do stuff with it
  }
  Log(log, "TESTING\n");
  Log(log, "TESt2\n");

  printf("PROCESS_INBOUND_UDP SKELETON -- replace!\n"
	 "Incoming message from %s:%d\n%s\n\n",
	 inet_ntoa(from.sin_addr),
	 ntohs(from.sin_port),
	 buf);
}

//
// process_get:
// Parameters:
// 		char *chunkfile:
// 		char *outputfile:
//
void process_get(char *chunkfile, char *outputfile, const bt_config_t *config) {
  Log(log, "Method call: process_get\n");

  //read chunkfile, send whohas with chunks
  //split whohas if data > 1500
  //


  FILE *fd;
  FILE *outf;
  char chunk_hash[HASHSIZE];
  char sendbuffer[BUFLEN];
  PacketHeader ph;
  char * sendbuf = sendbuffer;// + 16;
  char *payload = sendbuf + HEADERLEN;
  char *nextHash = payload + 4;
  int doneReading = 0;
  unsigned char readHashes = 0;
  hashNode *reqNode;
  unsigned int id;

  //create output file if doesn't exist
  outf = fopen(outputfile, "w");
  globalReqHashes->fstream = outf;

  memset(sendbuf,0,BUFLEN);
  fd = fopen(chunkfile, "r");
  CHK_NULL(fd);
  while(doneReading == 0){
    //exit once done reading file
    while(1){
      //exit once at MAX_PACKET_SIZE
      if (nextHash + HASHSIZE > sendbuf + BUFLEN)
		break;
      if ((id = getNextHashFromFile(fd,chunk_hash)) == FAILURE){
		doneReading = 1;
		break;
      }
      readHashes++;
      memcpy(nextHash, chunk_hash, HASHSIZE);//Make next line better
      reqNode = newHashNode(chunk_hash, id);
      appendNode(globalReqHashes,reqNode);
      putTimeout(reqNode, getTime());
      nextHash += HASHSIZE;
    }
    memcpy(payload, &readHashes, sizeof(readHashes));

    createPacketHeader(&ph, WHOHAS, HEADERLEN, nextHash - sendbuf/*CHECK*/,0,0);

    putHeader(&ph, sendbuf);
    sendToAllPeers(mysock, sendbuffer, config);
	//TODO: SEND TO PEERS
    readHashes = 0;
    nextHash = payload + 4;
    memset(sendbuf, 0, BUFLEN);
  }
  fclose(fd);
  //While(1)
     //read hasehs into buf
     //if buf data size == 1500 continue
     //if done break

  printf("PROCESS GET SKELETON CODE CALLED.  Fill me in!  (%s, %s)\n",
	chunkfile, outputfile);
}

//
// handle_user_input:
// Parameters:
// 		char *line:
// 		void *cbdata:
//
void handle_user_input(char *line, void *cbdata) {
  Log(log, "Method call: handle_user_input\n");

  char chunkf[128], outf[128];

  bzero(chunkf, sizeof(chunkf));
  bzero(outf, sizeof(outf));

  if (sscanf(line, "GET %120s %120s", chunkf, outf)) {
    if (strlen(outf) > 0) {
      process_get(chunkf, outf, globalconfig);
    }
  }
}

//
// peer_run: runs the peer
// Parameters:
// 		bt_config_t *config: parsed
//
void peer_run(bt_config_t *config) {
  int listener;
  struct sockaddr_in myaddr;
  fd_set readfds;
  struct user_iobuf *userbuf;
  //requestedHashes has one node for everyHash in the file specified in the GET request
  hashList *requestedHashes = newHashList();
  hashList *downloadingHashes = newHashList();
  hashList *uploadingHashes = newHashList();

  globalReqHashes = requestedHashes;
  globalconfig = config;
  uploadingHashes->fstream = fopen(config->tar_file, "r");

  Log(log, "Method call: peer_run\n");

  if ((userbuf = create_userbuf()) == NULL) {
    Log(log, "Error: peer_run could not allocate userbuf\n");
    exit(EXIT_FAILURE);
  }

  Log(log, "Success: peer_run allocated userbuf\n");

  if ((listener = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP)) == -1) {
    Log(log, "Error: peer_run could not create socket\n");
    exit(EXIT_FAILURE);
  }

  Log(log, "Success: peer_run created socket\n");

  bzero(&myaddr, sizeof(myaddr));
  myaddr.sin_family = AF_INET;
  myaddr.sin_addr.s_addr = htonl(INADDR_ANY);
  myaddr.sin_port = htons(config->myport);

  if (bind(listener, (struct sockaddr *) &myaddr, sizeof(myaddr)) == -1) {
    Log(log, "Error: peer_run could not bind socket\n");
    exit(EXIT_FAILURE);
  }
  mysock = listener;

  Log(log, "Success: peer_run created bind to socket\n");
  Log(log, "I am running on %s:%d\n\n",
	 inet_ntoa(myaddr.sin_addr),
	 ntohs(myaddr.sin_port));

#ifdef SPIFFY
  spiffy_init(config->identity, (struct sockaddr *)&myaddr, sizeof(myaddr));
#endif
  while (1) {
    //Check for user input
    //If Sending Check timeouts
    //Read data from connections
    int nfds;
    FD_SET(STDIN_FILENO, &readfds);
    FD_SET(listener, &readfds);

    nfds = select(listener+1, &readfds, NULL, NULL, NULL);

    if (nfds > 0) {
      if (FD_ISSET(listener, &readfds)) {
	process_inbound_udp(listener,config, requestedHashes, downloadingHashes, uploadingHashes);
      }

      if (FD_ISSET(STDIN_FILENO, &readfds)) {
	process_user_input(STDIN_FILENO, userbuf, handle_user_input,
			   "Currently unused");
	downloadingHashes->fstream = requestedHashes->fstream;
      }
    }
  }
  freeList(requestedHashes);
  freeList(downloadingHashes);
  freeList(uploadingHashes);
  free(userbuf);
}
