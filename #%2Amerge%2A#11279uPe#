/********************************************************************
 *																	*
 * peer.c															*
 *																	*
 * Description: This file contains the C source code for the 		*
 * 				BitTorrent file transfer application.				*
 * 				This BitTorrent is based on code originally 		*
 * 				authored by:										*
 * 					Ed Bardsley <ebardsle+441@andrew.cmu.edu>		*
 * 					Dave Andersen									*
 *																	*
 * 				The current implementation supports the following:	*
 * 					1. 												*
 * 					2.												*
 *																	*
 *******************************************************************/

#include <sys/types.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "debug.h"
#include "spiffy.h"
#include "bt_parse.h"
#include "input_buffer.h"
#include "log.h"
#include "packet.h"

#define SUCCESS 1
#define FAILURE -1
#define HASHSIZE 20

#define CHK_NULL(x) if (x == NULL) exit(1);

#define WINDOW_SIZE 8
#define MAX_PACKET_SIZE 1500

int UPLOADING = 0;
int DOWNLOADING = 0;
static FILE *log;
int mysock;
bt_config_t *globalconfig;

typedef struct
{
  struct sockaddr_in * addr;
  int ackNum;
  int chunk;
}DownloadConnection;

typedef struct
{
  struct sockaddr_in * addr;
  int timeout;
  int seqNum;
  int chunk;
}UploadConnection;

typedef struct
{
  struct sockaddr_in * addr;
}NonDataConnection;

void peer_run(bt_config_t *config);

//
// Main: Runs the server
// Parameters: Takes in 6 arguments
// Returns: 0 on success
//
int main(int argc, char **argv) {
  bt_config_t config;

  bt_init(&config, argc, argv);
  log = open_log("debug.txt");
  Log(log, "--------- peer.c main is running ---------\n");

  DPRINTF(DEBUG_INIT, "peer.c main beginning\n");

#ifdef TESTING
  config.identity = 11; // Team 11
  strcpy(config.chunk_file, "chunkfile");
  strcpy(config.has_chunk_file, "haschunks");
#endif

  Log(log, "Parsing command line args\n");
  bt_parse_command_line(&config);

#ifdef DEBUG
  if (debug & DEBUG_INIT) {
    bt_dump_config(&config);
  }
#endif
  
  peer_run(&config);
  return 0;
}


//
// getNextHashFromFile: gets the next hash from a file
// Parameters:
// 		FILE *fd: hash chunk file
// 		char *chunk_hash: desired hash
// Returns:
// 		EXIT_SUCCESS upon success
// 		EXIT_FAILURE upon failure
//
int getNextHashFromFile(FILE *fd, char *chunk_hash)
{
  char *line = NULL;
  size_t len = 0;
  ssize_t read;

  Log(log, "Method call: getNextHashFromFile\n");
  Log(log, "Getting next hash from file: hash = %s\n", chunk_hash);

  if ((read = getline(&line, &len, fd)) < 0)
    return FAILURE;
  }
  
  //The hash starts after ' '; copy current hash into chunk_hash
  memcpy(chunk_hash, strchr((const char *)line, ' ') + 1, HASHSIZE);
  Log(log, "Success: copying hash into chunk_hash: hash = %s", line);
  
  free(line);
  return SUCCESS;
  
}


//
//sendToAllPeers: Send buf to all in peer_list_file

void sendToAllPeers(int sock, char* sendbuf, const bt_config_t *config)
{
  #define BUFLEN 1500
  struct sockaddr_in peer;
  socklen_t peerlen;
  FILE *fd;
  char *line;
  size_t len = 0;
  ssize_t read;
  char * peer_address_s;
  char *peer_port_s;
  unsigned int peer_port;
  peerlen = sizeof(peer);
  fd = fopen(config->peer_list_file, "r");
  
  while((read = getline(&line,&len ,fd)) != -1){
    peer_address_s = strchr(line, ' ') + 1;
    peer_port_s = strchr(peer_address_s, ' ') + 1;
    *(peer_port_s - 1) = (char)0;//so that peer_address looks like a string
    
    sscanf(peer_port_s, "%u", &peer_port);
    peer.sin_family = AF_INET;
    peer.sin_port = htons(peer_port);
    inet_pton(AF_INET, peer_address_s, &peer.sin_addr);

    spiffy_sendto(sock, sendbuf, BUFLEN, 0, (const struct sockaddr *) &peer, peerlen);
  }
  free(line);
  fclose(fd);
}

//
// generateResponseToWHOHAS: 
// Parameters:
// 		const char *data: 
// 		char *senddata
// 		const bt_config_t *config:
// Returns:
//		int hits: 
//
int generateResponseToWHOHAS(const char *data, char *senddata, const bt_config_t *config)
{
  int i;
  FILE *fd;
  unsigned char hits = 0;
  char chunk_hash[HASHSIZE];
  const char *has_chunk_file, *chunk_hashes;
  /*char line[30];   //unused variable */

  has_chunk_file = config->has_chunk_file;

  Log(log, "Method call: generateResponseToWHOHAS\n");

  //Get number of chunk hashes from payload
  unsigned char numChunkHashes;
  memcpy(&numChunkHashes, data, sizeof(numChunkHashes));

  //The chunk hashes start after the first 4 bytes of data
  chunk_hashes = data + 4;

  Log(log, "Opening has_chunk_file\n");
  fd = fopen(has_chunk_file, "r");
  if (fd == NULL){ //change to CHK_NULL-- why??
	Log(log, "Error: has_chunk_file is NULL. Closing file.\n");
	fclose(fd);
	exit(EXIT_FAILURE);
  }

  Log(log, "Success: Opened has_chunk_file\n");

  //Read has_chunk_file line by line comparing each chunk hash to requested hashes
  while(getNextHashFromFile(fd, chunk_hash) == SUCCESS){

    //Search if chunk_hash is in the requested hashes
    for(i = 0; i < numChunkHashes; i++){

      //If we found a match, copy the hash into the next space in senddata
      if(memcmp(chunk_hash,chunk_hashes + (HASHSIZE * i), HASHSIZE) == 0){
		Log(log, "Found match in has_chunk_file\n");
		memcpy((senddata + 4) + (hits*HASHSIZE), chunk_hash, HASHSIZE);
		hits++;
      }
    }
  }
  fclose(fd);
  //Copy number of hashchunks into data
  memcpy(senddata, &hits, sizeof(hits));
  Log(log, "WHOHAS num hits: %d\n", hits);

  return hits;
}

//
// process_inbound_udp: 
// Parameters:
// 		int sock:
//              bt_config_t *config: Command line args
//

void process_inbound_udp(int sock, const bt_config_t *config)
{
  #define BUFLEN 1500
  
  PacketHeader ph;
  struct sockaddr_in from;
  socklen_t fromlen;
  char buf[BUFLEN];
  char sendbuf[BUFLEN];
  char *data;
  char *senddata;
  int readret;
  unsigned char hits;
  unsigned int senddataLen;
  fromlen = sizeof(from);

  Log(log, "Method call: process_inbound_udp\n");

  readret = spiffy_recvfrom(sock, buf, BUFLEN, 0, (struct sockaddr *) &from, &fromlen);
  if (readret <= 0){
	Log(log, "Error: spiffy_recvfrom failed\n");
	//Do something?
  }else{
	Log(log, "Success: spiffy_recvfrom got something\n");

	//Parse the packet header into the fields
	fillPacketHeader(&ph, buf);
	
	//Set data to point to the data in the packet
	data = buf + ph.headerLen;
	senddata = sendbuf + ph.headerLen;

	//Check the validity of the packet received
	if((ph.magicNum == 15441) && (ph.version == 1)){

		switch(ph.type){
	    	case WHOHAS :
				Log(log, "Received WHOHAS Request\n");

				//Data is buf after header
				hits = generateResponseToWHOHAS(data,senddata,config);
				if (hits > 0){
			  		senddataLen = hits * HASHSIZE;
			  		createPacketHeader(&ph, IHAVE, ph.headerLen, ph.headerLen + senddataLen, 0, 0);
		   			putHeader(&ph, sendbuf);
		   			spiffy_sendto(sock, sendbuf, BUFLEN, 0, (const struct sockaddr *) &from, fromlen);
		  		}

				//check if I have
				//Reply with IHAVE
				break;
    		case IHAVE :
				Log(log, "Received IHAVE Request\n");
				//check to make sure you rewquested that chunk
		  		//setupDowloadConnection
				break;
    		case GET :
				Log(log, "Received GET Request\n");
				//check to make sure you have
		  		//setup Upload connection
				//send first WINDOW_SIZE packets
		  		break;
    		case DATA :
		  		//find download connection
		  		//if seq != nextExpected 
		  		//buffer chunk, send last ACK
		  		//else save data, send ACK
		  		break;
    		case ACK :
		  		//if not correct ACK
		  		//else send next chunk
		  		break;
    		case DENIED :
		  		break;
	    	default :
				//Do something else
				;
	    }
    }

 //do stuff with it
  }
  

  printf("PROCESS_INBOUND_UDP SKELETON -- replace!\n"
	 "Incoming message from %s:%d\n%s\n\n", 
	 inet_ntoa(from.sin_addr),
	 ntohs(from.sin_port),
	 buf);
}

//
// process_get: 
// Parameters:
// 		char *chunkfile: 
// 		char *outputfile:
//
void process_get(char *chunkfile, char *outputfile, const bt_config_t *config) {
  Log(log, "Method call: process_get\n");
  
  //read chunkfile, send whohas with chunks
  //split whohas if data > 1500
  //
  #define HEADERLEN 16
  
  FILE *fd;
  char chunk_hash[HASHSIZE];
  char sendbuf[BUFLEN];
  PacketHeader ph;
  char *payload = sendbuf + HEADERLEN;
  char *nextHash = payload + 4;
  int doneReading = 0;
  int readHashes = 0;

  fd = fopen(chunkfile, "r");
  if (fd == NULL){

  }
  while(doneReading == 0){
    //exit once done reading file
    while(1){
      //exit once at MAX_PACKET_SIZE
      if (nextHash + HASHSIZE > sendbuf + BUFLEN)
		break;
      if (getNextHashFromFile(fd,chunk_hash) == FAILURE){
		doneReading = 1;
		break;
      }
      readHashes++;
      memcpy(nextHash, chunk_hash, HASHSIZE);
      nextHash += HASHSIZE;
    }
    
    memcpy(payload, &readHashes, 2);
    createPacketHeader(&ph, WHOHAS, HEADERLEN, nextHash - sendbuf/*CHECK*/,0,0);
    sendToAllPeers(mysock, sendbuf, config);
	//TODO: SEND TO PEERS
    readHashes = 0;
    nextHash = payload + 4;
    memset(sendbuf, 0, BUFLEN);
  }
  fclose(fd);
  //While(1)
     //read hasehs into buf 
     //if buf data size == 1500 continue
     //if done break
  
  printf("PROCESS GET SKELETON CODE CALLED.  Fill me in!  (%s, %s)\n", 
	chunkfile, outputfile);
}

//
// handle_user_input: 
// Parameters:
// 		char *line: 
// 		void *cbdata: 
//
void handle_user_input(char *line, void *cbdata) {
  Log(log, "Method call: handle_user_input\n");

  char chunkf[128], outf[128];

  bzero(chunkf, sizeof(chunkf));
  bzero(outf, sizeof(outf));

  if (sscanf(line, "GET %120s %120s", chunkf, outf)) {
    if (strlen(outf) > 0) {
      process_get(chunkf, outf, globalconfig);
    }
  }
}

//
// peer_run:
// Parameters:
// 		bt_config_t *config: 
//
void peer_run(bt_config_t *config) {
  int listener;
  struct sockaddr_in myaddr;
  fd_set readfds;
  struct user_iobuf *userbuf;

  globalconfig = config;
  Log(log, "Method call: peer_run\n");

  if ((userbuf = create_userbuf()) == NULL) {
    Log(log, "Error: peer_run could not allocate userbuf\n");
    exit(-1);
  }
  
  Log(log, "Success: peer_run allocated userbuf\n");

  if ((listener = socket(AF_INET, SOCK_DGRAM, IPPROTO_IP)) == -1) {
    Log(log, "Error: peer_run could not create socket\n");
    exit(-1);
  }

  Log(log, "Success: peer_run created socket\n");
  
  bzero(&myaddr, sizeof(myaddr));
  myaddr.sin_family = AF_INET;
  myaddr.sin_addr.s_addr = htonl(INADDR_ANY);
  myaddr.sin_port = htons(config->myport);
  
  if (bind(listener, (struct sockaddr *) &myaddr, sizeof(myaddr)) == -1) {
    Log(log, "Error: peer_run could not bind socket\n");
    exit(-1);
  }
  mysock = listener;

  Log(log, "Success: peer_run created bind to socket\n");
  
  spiffy_init(config->identity, (struct sockaddr *)&myaddr, sizeof(myaddr));
  
  while (1) {
    //Check for user input
    //If Sending Check timeouts
    //Read data from connections
    int nfds;
    FD_SET(STDIN_FILENO, &readfds);
    FD_SET(listener, &readfds);
    
    nfds = select(listener+1, &readfds, NULL, NULL, NULL);
    
    if (nfds > 0) {
      if (FD_ISSET(listener, &readfds)) {
	process_inbound_udp(listener,config);
      }
      
      if (FD_ISSET(STDIN_FILENO, &readfds)) {
	process_user_input(STDIN_FILENO, userbuf, handle_user_input,
			   "Currently unused");
      }
    }
  }
}
